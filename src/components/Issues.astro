---
import { getCollection, type CollectionEntry } from "astro:content";

const allIssues = await getCollection("issues")
	.then((issues) => issues.sort((a, b) => {
		return Number(b.data.number) - Number(a.data.number);
	}))
	.catch((err) => {
		console.error(err);
		return [];
	});

const issuesByYear = allIssues.reduce<Record<string, CollectionEntry<'issues'>[]>>((acc, issue) => {
	const year = issue.data.year;
	if (!acc[year]) {
		acc[year] = [];
	}
	acc[year].push(issue);
	return acc;
}, {});

---

<div class="issues">
	{Object.keys(issuesByYear).sort((a, b) => Number(b) - Number(a)).map((year) => (
		<section>
			<div class="container">
				<h2>{year}</h2>
				<div class="issues-list">
					{issuesByYear[year].map((issue) => (
						<a href={`/issues/${issue.data.number}/`}>
							{/* Edição {issue.data.number} - {issue.data.title} */}
							<img src="https://placehold.co/200x280" alt="" />
						</a>
					))}
				</div>
			</div>
		</section>
	))}
</div>

<style>
	.issues {
		margin-top: 12rem;
	}
	.issues section:nth-child(odd) {
		--bg-color: var(--color-background-secondary);
	}
	.issues section:nth-child(even) {
		--bg-color: var(--color-background);
	}

	.issues section {
		background-color: var(--bg-color);
		padding-block: 2rem;
		position: relative;
		padding-block: 1rem 12rem;
	}

	.issues h2 {
		font-size: 12rem;
		line-height: 1;
		position: absolute;
		bottom: calc(100% - 2.3rem);
		color: var(--bg-color);
		user-select: none;
	}

	.issues .issues-list {
		position: relative;
		z-index: 1;
		margin-top: -4rem;
		display: grid;
		grid-template-columns: repeat(3, 1fr);
		justify-items: center;
		gap: 2rem;

		img {
			border-radius: 8px;
		}

		@media (max-width: 767px) {
			grid-template-columns: repeat(2, 1fr);
		}
	}
</style>